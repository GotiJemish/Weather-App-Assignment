{"ast":null,"code":"const WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'e8f9ed3cc3e9b171dd790bfa019139d9';\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`), fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`)]);\n    const weatherResponse = await weatherPromise.json();\n    console.log(weatherResponse);\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\nconst fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n  }\n};\nexport { fetchCitiesData };","map":{"version":3,"names":["WEATHER_API_URL","WEATHER_API_KEY","fetchWeatherData","lat","lon","weatherPromise","forcastPromise","Promise","all","fetch","weatherResponse","json","console","log","forcastResponse","error","fetchCitiesData","response","data","results"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/api/Api.js"],"sourcesContent":["\nconst WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'e8f9ed3cc3e9b171dd790bfa019139d9';\n\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([\n      fetch(\n        `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n      fetch(\n        \n        `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n    ]);\n\n    const weatherResponse = await weatherPromise.json();\n    console.log(weatherResponse)\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\nconst fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n  return data.results\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n  }\n};\nexport { fetchCitiesData };\n\n\n\n\n"],"mappings":"AACA,MAAMA,eAAe,GAAG,yCAAyC;AACjE,MAAMC,eAAe,GAAG,kCAAkC;AAE1D,OAAO,eAAeC,gBAAgBA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC/C,IAAI;IACF,IAAI,CAACC,cAAc,EAAEC,cAAc,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,CACF,GAAET,eAAgB,gBAAeG,GAAI,QAAOC,GAAI,UAASH,eAAgB,eAC5E,CAAC,EACDQ,KAAK,CAEF,GAAET,eAAgB,iBAAgBG,GAAI,QAAOC,GAAI,UAASH,eAAgB,eAC7E,CAAC,CACF,CAAC;IAEF,MAAMS,eAAe,GAAG,MAAML,cAAc,CAACM,IAAI,CAAC,CAAC;IACnDC,OAAO,CAACC,GAAG,CAACH,eAAe,CAAC;IAC5B,MAAMI,eAAe,GAAG,MAAMR,cAAc,CAACK,IAAI,CAAC,CAAC;IACnD,OAAO,CAACD,eAAe,EAAEI,eAAe,CAAC;EAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACpB;AACF;AAGA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAAC,4NAA4N,CAAC;IAC1P,MAAMS,IAAI,GAAG,MAAMD,QAAQ,CAACN,IAAI,CAAC,CAAC;IACpC,OAAOO,IAAI,CAACC,OAAO;EACnB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC;AACD,SAASC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}