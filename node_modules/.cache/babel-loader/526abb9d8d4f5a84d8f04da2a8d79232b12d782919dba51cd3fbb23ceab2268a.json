{"ast":null,"code":"import TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport { styled, createTheme } from '@mui/material/styles';\nimport { alpha } from '@mui/material/styles';\nimport InputBase from '@mui/material/InputBase';\nconst Search = styled('div')(({\n  theme\n}) => ({\n  position: 'relative',\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.common.white, 0.25)\n  },\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: '100%',\n  [theme.breakpoints.up('sm')]: {\n    marginLeft: theme.spacing(3),\n    width: 'auto'\n  }\n}));\nconst SearchIconWrapper = styled('div')(({\n  theme\n}) => ({\n  padding: theme.spacing(0, 2),\n  height: '100%',\n  position: 'absolute',\n  pointerEvents: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n}));\nconst StyledInputBase = styled(InputBase)(({\n  theme\n}) => ({\n  color: 'inherit',\n  '& .MuiInputBase-input': {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch'\n    }\n  }\n}));\nconst StyledTableCell = styled(TableCell)(({\n  theme\n}) => ({\n  [`&.${tableCellClasses.head}`]: {},\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14\n  }\n}));\n\n// Define dark mode variable\nconst darkMode = false; // Change this value according to your application logic\n\nconst theme = createTheme({\n  palette: {\n    mode: darkMode ? 'dark' : 'light' // Set theme mode based on darkMode variable\n  }\n});\nexport { Search, SearchIconWrapper, StyledInputBase, StyledTableCell, theme, darkMode };","map":{"version":3,"names":["TableCell","tableCellClasses","styled","createTheme","alpha","InputBase","Search","theme","position","borderRadius","shape","backgroundColor","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","color","paddingLeft","transition","transitions","create","StyledTableCell","head","body","fontSize","darkMode","mode"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/components/Reusable/TableStyle.js"],"sourcesContent":["import TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport { styled, createTheme } from '@mui/material/styles';\r\nimport { alpha } from '@mui/material/styles';\r\nimport InputBase from '@mui/material/InputBase';\r\n\r\nconst Search = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  marginRight: theme.spacing(2),\r\n  marginLeft: 0,\r\n  width: '100%',\r\n  [theme.breakpoints.up('sm')]: {\r\n    marginLeft: theme.spacing(3),\r\n    width: 'auto',\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch',\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\n// Define dark mode variable\r\nconst darkMode = false; // Change this value according to your application logic\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: darkMode ? 'dark' : 'light', // Set theme mode based on darkMode variable\r\n  },\r\n});\r\n\r\nexport { Search, SearchIconWrapper, StyledInputBase, StyledTableCell, theme, darkMode };\r\n"],"mappings":"AAAA,OAAOA,SAAS,IAAIC,gBAAgB,QAAQ,yBAAyB;AACrE,SAASC,MAAM,EAAEC,WAAW,QAAQ,sBAAsB;AAC1D,SAASC,KAAK,QAAQ,sBAAsB;AAC5C,OAAOC,SAAS,MAAM,yBAAyB;AAE/C,MAAMC,MAAM,GAAGJ,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;EAAEK;AAAM,CAAC,MAAM;EAC3CC,QAAQ,EAAE,UAAU;EACpBC,YAAY,EAAEF,KAAK,CAACG,KAAK,CAACD,YAAY;EACtCE,eAAe,EAAEP,KAAK,CAACG,KAAK,CAACK,OAAO,CAACC,MAAM,CAACC,KAAK,EAAE,IAAI,CAAC;EACxD,SAAS,EAAE;IACTH,eAAe,EAAEP,KAAK,CAACG,KAAK,CAACK,OAAO,CAACC,MAAM,CAACC,KAAK,EAAE,IAAI;EACzD,CAAC;EACDC,WAAW,EAAER,KAAK,CAACS,OAAO,CAAC,CAAC,CAAC;EAC7BC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,MAAM;EACb,CAACX,KAAK,CAACY,WAAW,CAACC,EAAE,CAAC,IAAI,CAAC,GAAG;IAC5BH,UAAU,EAAEV,KAAK,CAACS,OAAO,CAAC,CAAC,CAAC;IAC5BE,KAAK,EAAE;EACT;AACF,CAAC,CAAC,CAAC;AAEH,MAAMG,iBAAiB,GAAGnB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;EAAEK;AAAM,CAAC,MAAM;EACtDe,OAAO,EAAEf,KAAK,CAACS,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5BO,MAAM,EAAE,MAAM;EACdf,QAAQ,EAAE,UAAU;EACpBgB,aAAa,EAAE,MAAM;EACrBC,OAAO,EAAE,MAAM;EACfC,UAAU,EAAE,QAAQ;EACpBC,cAAc,EAAE;AAClB,CAAC,CAAC,CAAC;AAEH,MAAMC,eAAe,GAAG1B,MAAM,CAACG,SAAS,CAAC,CAAC,CAAC;EAAEE;AAAM,CAAC,MAAM;EACxDsB,KAAK,EAAE,SAAS;EAChB,uBAAuB,EAAE;IACvBP,OAAO,EAAEf,KAAK,CAACS,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClCc,WAAW,EAAG,cAAavB,KAAK,CAACS,OAAO,CAAC,CAAC,CAAE,GAAE;IAC9Ce,UAAU,EAAExB,KAAK,CAACyB,WAAW,CAACC,MAAM,CAAC,OAAO,CAAC;IAC7Cf,KAAK,EAAE,MAAM;IACb,CAACX,KAAK,CAACY,WAAW,CAACC,EAAE,CAAC,IAAI,CAAC,GAAG;MAC5BF,KAAK,EAAE;IACT;EACF;AACF,CAAC,CAAC,CAAC;AAEH,MAAMgB,eAAe,GAAGhC,MAAM,CAACF,SAAS,CAAC,CAAC,CAAC;EAAEO;AAAM,CAAC,MAAM;EACxD,CAAE,KAAIN,gBAAgB,CAACkC,IAAK,EAAC,GAAG,CAChC,CAAC;EACD,CAAE,KAAIlC,gBAAgB,CAACmC,IAAK,EAAC,GAAG;IAC9BC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC,CAAC;;AAEH;AACA,MAAMC,QAAQ,GAAG,KAAK,CAAC,CAAC;;AAExB,MAAM/B,KAAK,GAAGJ,WAAW,CAAC;EACxBS,OAAO,EAAE;IACP2B,IAAI,EAAED,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAE;EACrC;AACF,CAAC,CAAC;AAEF,SAAShC,MAAM,EAAEe,iBAAiB,EAAEO,eAAe,EAAEM,eAAe,EAAE3B,KAAK,EAAE+B,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}