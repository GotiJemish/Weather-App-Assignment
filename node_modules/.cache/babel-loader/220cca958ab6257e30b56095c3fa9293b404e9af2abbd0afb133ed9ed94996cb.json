{"ast":null,"code":"const GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\nconst WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'e8f9ed3cc3e9b171dd790bfa019139d9';\nconst GEO_API_OPTIONS = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\n  }\n};\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`), fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`)]);\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function fetchCities(input) {\n  const API_KEY = 'YOUR_OPENWEATHERMAP_API_KEY'; // Replace 'YOUR_OPENWEATHERMAP_API_KEY' with your actual API key\n  const OPENWEATHERMAP_API_URL = 'https://api.openweathermap.org/geo/1.0/direct';\n  try {\n    const response = await fetch(`${OPENWEATHERMAP_API_URL}?limit=10&q=${input}&appid=${WEATHER_API_KEY}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}\nconst fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n  }\n};\nexport { fetchCitiesData };","map":{"version":3,"names":["GEO_API_URL","WEATHER_API_URL","WEATHER_API_KEY","GEO_API_OPTIONS","method","headers","fetchWeatherData","lat","lon","weatherPromise","forcastPromise","Promise","all","fetch","weatherResponse","json","forcastResponse","error","console","log","fetchCities","input","API_KEY","OPENWEATHERMAP_API_URL","response","data","fetchCitiesData","results"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/api/Api.js"],"sourcesContent":["const GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\n\nconst WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'e8f9ed3cc3e9b171dd790bfa019139d9';\n\nconst GEO_API_OPTIONS = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\n  },\n};\n\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([\n      fetch(\n        `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n      fetch(\n        `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n    ]);\n\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchCities(input) {\n  const API_KEY = 'YOUR_OPENWEATHERMAP_API_KEY'; // Replace 'YOUR_OPENWEATHERMAP_API_KEY' with your actual API key\n  const OPENWEATHERMAP_API_URL = 'https://api.openweathermap.org/geo/1.0/direct';\n\n  try {\n    const response = await fetch(\n      `${OPENWEATHERMAP_API_URL}?limit=10&q=${input}&appid=${WEATHER_API_KEY}`\n    );\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}\n\n\nconst fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n  return data.results\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n  }\n};\nexport { fetchCitiesData };\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,0CAA0C;AAE9D,MAAMC,eAAe,GAAG,yCAAyC;AACjE,MAAMC,eAAe,GAAG,kCAAkC;AAE1D,MAAMC,eAAe,GAAG;EACtBC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;IACP,gBAAgB,EAAE,oDAAoD;IACtE,iBAAiB,EAAE;EACrB;AACF,CAAC;AAED,OAAO,eAAeC,gBAAgBA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC/C,IAAI;IACF,IAAI,CAACC,cAAc,EAAEC,cAAc,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,CACF,GAAEZ,eAAgB,gBAAeM,GAAI,QAAOC,GAAI,UAASN,eAAgB,eAC5E,CAAC,EACDW,KAAK,CACF,GAAEZ,eAAgB,iBAAgBM,GAAI,QAAOC,GAAI,UAASN,eAAgB,eAC7E,CAAC,CACF,CAAC;IAEF,MAAMY,eAAe,GAAG,MAAML,cAAc,CAACM,IAAI,CAAC,CAAC;IACnD,MAAMC,eAAe,GAAG,MAAMN,cAAc,CAACK,IAAI,CAAC,CAAC;IACnD,OAAO,CAACD,eAAe,EAAEE,eAAe,CAAC;EAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF;AAEA,OAAO,eAAeG,WAAWA,CAACC,KAAK,EAAE;EACvC,MAAMC,OAAO,GAAG,6BAA6B,CAAC,CAAC;EAC/C,MAAMC,sBAAsB,GAAG,+CAA+C;EAE9E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CACzB,GAAEU,sBAAuB,eAAcF,KAAM,UAASnB,eAAgB,EACzE,CAAC;IAED,MAAMuB,IAAI,GAAG,MAAMD,QAAQ,CAACT,IAAI,CAAC,CAAC;IAClC,OAAOU,IAAI;EACb,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB;EACF;AACF;AAGA,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMF,QAAQ,GAAG,MAAMX,KAAK,CAAC,4NAA4N,CAAC;IAC1P,MAAMY,IAAI,GAAG,MAAMD,QAAQ,CAACT,IAAI,CAAC,CAAC;IACpC,OAAOU,IAAI,CAACE,OAAO;EACnB,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC;AACD,SAASS,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}