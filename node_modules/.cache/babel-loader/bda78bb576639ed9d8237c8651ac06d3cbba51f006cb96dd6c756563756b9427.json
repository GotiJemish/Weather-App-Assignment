{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gja53\\\\OneDrive\\\\Desktop\\\\the-weather-forecasting-main\\\\the-weather-forecasting-main\\\\src\\\\components\\\\Search\\\\Search.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { AsyncPaginate } from 'react-select-async-paginate';\n// import { fetchCities } from '../../api/Api';\n\n// const Search = ({ onSearchChange }) => {\n//   const [searchValue, setSearchValue] = useState(null);\n\n//   const loadOptions = async (inputValue) => {\n//     const citiesList = await fetchCities(inputValue);\n\n//     return {\n//       options: citiesList.data.map((city) => {\n//         return {\n//           value: `${city.latitude} ${city.longitude}`,\n//           label: `${city.name}, ${city.countryCode}`,\n//         };\n//       }),\n//     };\n//   };\n\n//   const onChangeHandler = (enteredData) => {\n//     setSearchValue(enteredData);\n//     onSearchChange(enteredData);\n//   };\n\n//   return (\n//     <AsyncPaginate\n//       placeholder=\"Search for cities\"\n//       debounceTimeout={600}\n//       value={searchValue}\n//       onChange={onChangeHandler}\n//       loadOptions={loadOptions}\n//     />\n//   );\n// };\n\n// export default Search;\n\nimport React, { useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = ({\n  onSearchChange\n}) => {\n  _s();\n  const [searchValue, setSearchValue] = useState(null);\n  const loadOptions = async (inputValue, prevOptions, {\n    page\n  }) => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?limit=10&page=${page}&q=${inputValue}&appid=e8f9ed3cc3e9b171dd790bfa019139d9`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const data = await response.json();\n      console.log(data);\n      return {\n        options: data.map(city => ({\n          value: `${city.lat} ${city.lon}`,\n          label: `${city.name}, ${city.country}`\n        })),\n        hasMore: false // Assuming there's no pagination on server side\n      };\n    } catch (error) {\n      console.error('Error loading options:', error);\n      return {\n        options: [],\n        hasMore: false\n      };\n    }\n  };\n  const onChangeHandler = enteredData => {\n    setSearchValue(enteredData);\n    onSearchChange(enteredData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for cities\",\n    debounceTimeout: 600,\n    value: searchValue,\n    onChange: onChangeHandler,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"OrQVItsfaX3xDem37kG4cfR7N1k=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","AsyncPaginate","jsxDEV","_jsxDEV","Search","onSearchChange","_s","searchValue","setSearchValue","loadOptions","inputValue","prevOptions","page","response","fetch","ok","Error","data","json","console","log","options","map","city","value","lat","lon","label","name","country","hasMore","error","onChangeHandler","enteredData","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/components/Search/Search.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { AsyncPaginate } from 'react-select-async-paginate';\n// import { fetchCities } from '../../api/Api';\n\n\n\n\n// const Search = ({ onSearchChange }) => {\n//   const [searchValue, setSearchValue] = useState(null);\n\n//   const loadOptions = async (inputValue) => {\n//     const citiesList = await fetchCities(inputValue);\n\n//     return {\n//       options: citiesList.data.map((city) => {\n//         return {\n//           value: `${city.latitude} ${city.longitude}`,\n//           label: `${city.name}, ${city.countryCode}`,\n//         };\n//       }),\n//     };\n//   };\n\n//   const onChangeHandler = (enteredData) => {\n//     setSearchValue(enteredData);\n//     onSearchChange(enteredData);\n//   };\n\n//   return (\n//     <AsyncPaginate\n//       placeholder=\"Search for cities\"\n//       debounceTimeout={600}\n//       value={searchValue}\n//       onChange={onChangeHandler}\n//       loadOptions={loadOptions}\n//     />\n//   );\n// };\n\n// export default Search;\n\n\n\nimport React, { useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\n\nconst Search = ({ onSearchChange }) => {\n  const [searchValue, setSearchValue] = useState(null);\n\n  const loadOptions = async (inputValue, prevOptions, { page }) => {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/geo/1.0/direct?limit=10&page=${page}&q=${inputValue}&appid=e8f9ed3cc3e9b171dd790bfa019139d9`\n      );\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n\n      const data = await response.json();\n      console.log(data)\n      return {\n        options: data.map((city) => ({\n          value: `${city.lat} ${city.lon}`,\n          label: `${city.name}, ${city.country}`,\n        })),\n        hasMore: false, // Assuming there's no pagination on server side\n      };\n    } catch (error) {\n      console.error('Error loading options:', error);\n      return { options: [], hasMore: false };\n    }\n  };\n\n  const onChangeHandler = (enteredData) => {\n    setSearchValue(enteredData);\n    onSearchChange(enteredData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for cities\"\n      debounceTimeout={600}\n      value={searchValue}\n      onChange={onChangeHandler}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":";;AAAA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMS,WAAW,GAAG,MAAAA,CAAOC,UAAU,EAAEC,WAAW,EAAE;IAAEC;EAAK,CAAC,KAAK;IAC/D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,+DAA8DF,IAAK,MAAKF,UAAW,yCACtF,CAAC;MAED,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzC;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjB,OAAO;QACLI,OAAO,EAAEJ,IAAI,CAACK,GAAG,CAAEC,IAAI,KAAM;UAC3BC,KAAK,EAAG,GAAED,IAAI,CAACE,GAAI,IAAGF,IAAI,CAACG,GAAI,EAAC;UAChCC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,OAAQ;QACvC,CAAC,CAAC,CAAC;QACHC,OAAO,EAAE,KAAK,CAAE;MAClB,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QAAEV,OAAO,EAAE,EAAE;QAAES,OAAO,EAAE;MAAM,CAAC;IACxC;EACF,CAAC;EAED,MAAME,eAAe,GAAIC,WAAW,IAAK;IACvCzB,cAAc,CAACyB,WAAW,CAAC;IAC3B5B,cAAc,CAAC4B,WAAW,CAAC;EAC7B,CAAC;EAED,oBACE9B,OAAA,CAACF,aAAa;IACZiC,WAAW,EAAC,mBAAmB;IAC/BC,eAAe,EAAE,GAAI;IACrBX,KAAK,EAAEjB,WAAY;IACnB6B,QAAQ,EAAEJ,eAAgB;IAC1BvB,WAAW,EAAEA;EAAY;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN,CAAC;AAAClC,EAAA,CA1CIF,MAAM;AAAAqC,EAAA,GAANrC,MAAM;AA4CZ,eAAeA,MAAM;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}