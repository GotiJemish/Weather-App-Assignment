{"ast":null,"code":"const WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'e8f9ed3cc3e9b171dd790bfa019139d9';\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`), fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`)]);\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\nconst fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n  }\n};\nexport { fetchCitiesData };\nconst GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\nconst GEO_API_OPTIONS = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\n  }\n};\nexport async function fetchCities(input) {\n  try {\n    const response = await fetch(`https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop&q=surat&facet=country`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const {\n      records\n    } = await response.json();\n\n    // Process the data as needed\n    const citiesList = records.map(record => ({\n      latitude: record.fields.latitude,\n      longitude: record.fields.longitude,\n      name: record.fields.city,\n      countryCode: record.fields.country\n    }));\n    return citiesList;\n  } catch (error) {\n    console.error('Error fetching cities:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["WEATHER_API_URL","WEATHER_API_KEY","fetchWeatherData","lat","lon","weatherPromise","forcastPromise","Promise","all","fetch","weatherResponse","json","forcastResponse","error","console","log","fetchCitiesData","response","data","results","GEO_API_URL","GEO_API_OPTIONS","method","headers","fetchCities","input","ok","Error","records","citiesList","map","record","latitude","fields","longitude","name","city","countryCode","country"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/api/Api.js"],"sourcesContent":["\nconst WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'e8f9ed3cc3e9b171dd790bfa019139d9';\n\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([\n      fetch(\n        `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n      fetch(\n        `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n    ]);\n\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\nconst fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n  return data.results\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n  }\n};\nexport { fetchCitiesData };\nconst GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\n\nconst GEO_API_OPTIONS = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\n  },\n};\n\nexport async function fetchCities(input) {\n  try {\n    const response = await fetch(\n      `https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop&q=surat&facet=country`\n    );\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n\n    const { records } = await response.json();\n\n    // Process the data as needed\n    const citiesList = records.map((record) => ({\n      latitude: record.fields.latitude,\n      longitude: record.fields.longitude,\n      name: record.fields.city,\n      countryCode: record.fields.country,\n    }));\n\n    return citiesList;\n  } catch (error) {\n    console.error('Error fetching cities:', error);\n    throw error;\n  }\n}\n"],"mappings":"AACA,MAAMA,eAAe,GAAG,yCAAyC;AACjE,MAAMC,eAAe,GAAG,kCAAkC;AAE1D,OAAO,eAAeC,gBAAgBA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC/C,IAAI;IACF,IAAI,CAACC,cAAc,EAAEC,cAAc,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,CACF,GAAET,eAAgB,gBAAeG,GAAI,QAAOC,GAAI,UAASH,eAAgB,eAC5E,CAAC,EACDQ,KAAK,CACF,GAAET,eAAgB,iBAAgBG,GAAI,QAAOC,GAAI,UAASH,eAAgB,eAC7E,CAAC,CACF,CAAC;IAEF,MAAMS,eAAe,GAAG,MAAML,cAAc,CAACM,IAAI,CAAC,CAAC;IACnD,MAAMC,eAAe,GAAG,MAAMN,cAAc,CAACK,IAAI,CAAC,CAAC;IACnD,OAAO,CAACD,eAAe,EAAEE,eAAe,CAAC;EAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF;AAGA,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAAC,4NAA4N,CAAC;IAC1P,MAAMS,IAAI,GAAG,MAAMD,QAAQ,CAACN,IAAI,CAAC,CAAC;IACpC,OAAOO,IAAI,CAACC,OAAO;EACnB,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC;AACD,SAASG,eAAe;AACxB,MAAMI,WAAW,GAAG,0CAA0C;AAE9D,MAAMC,eAAe,GAAG;EACtBC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;IACP,gBAAgB,EAAE,oDAAoD;IACtE,iBAAiB,EAAE;EACrB;AACF,CAAC;AAED,OAAO,eAAeC,WAAWA,CAACC,KAAK,EAAE;EACvC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMR,KAAK,CACzB,sGACH,CAAC;IAED,IAAI,CAACQ,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,MAAM;MAAEC;IAAQ,CAAC,GAAG,MAAMX,QAAQ,CAACN,IAAI,CAAC,CAAC;;IAEzC;IACA,MAAMkB,UAAU,GAAGD,OAAO,CAACE,GAAG,CAAEC,MAAM,KAAM;MAC1CC,QAAQ,EAAED,MAAM,CAACE,MAAM,CAACD,QAAQ;MAChCE,SAAS,EAAEH,MAAM,CAACE,MAAM,CAACC,SAAS;MAClCC,IAAI,EAAEJ,MAAM,CAACE,MAAM,CAACG,IAAI;MACxBC,WAAW,EAAEN,MAAM,CAACE,MAAM,CAACK;IAC7B,CAAC,CAAC,CAAC;IAEH,OAAOT,UAAU;EACnB,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}