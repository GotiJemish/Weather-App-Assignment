{"ast":null,"code":"const WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'e8f9ed3cc3e9b171dd790bfa019139d9';\nconst fetchWeatherData = async (lat, lon) => {\n  try {\n    const [weatherPromise, forecastPromise] = await Promise.all([fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`), fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`)]);\n    const [weatherResponse, forecastResponse] = await Promise.all([weatherPromise.json(), forecastPromise.json()]);\n    return [weatherResponse, forecastResponse];\n  } catch (error) {\n    console.log(error);\n    return [null, null]; // Return null if there's an error\n  }\n};\nconst fetchCities = async input => {\n  const OPENWEATHERMAP_API_URL = 'https://api.openweathermap.org/geo/1.0/direct';\n  try {\n    const response = await fetch(`${OPENWEATHERMAP_API_URL}?limit=10&q=${input}&appid=${WEATHER_API_KEY}`);\n    const data = await response.json();\n    clg;\n    return data;\n  } catch (error) {\n    console.log(error);\n    return null; // Return null if there's an error\n  }\n};\nconst fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n    return []; // Return empty array if there's an error\n  }\n};\nexport { fetchCitiesData, fetchCities, fetchWeatherData };","map":{"version":3,"names":["WEATHER_API_URL","WEATHER_API_KEY","fetchWeatherData","lat","lon","weatherPromise","forecastPromise","Promise","all","fetch","weatherResponse","forecastResponse","json","error","console","log","fetchCities","input","OPENWEATHERMAP_API_URL","response","data","clg","fetchCitiesData","results"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/api/Api.js"],"sourcesContent":["const WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'e8f9ed3cc3e9b171dd790bfa019139d9';\n\nconst fetchWeatherData = async (lat, lon) => {\n  try {\n    const [weatherPromise, forecastPromise] = await Promise.all([\n      fetch(\n        `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n      fetch(\n        `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n    ]);\n\n    const [weatherResponse, forecastResponse] = await Promise.all([\n      weatherPromise.json(),\n      forecastPromise.json(),\n    ]);\n\n    return [weatherResponse, forecastResponse];\n  } catch (error) {\n    console.log(error);\n    return [null, null]; // Return null if there's an error\n  }\n};\n\nconst fetchCities = async (input) => {\n  const OPENWEATHERMAP_API_URL = 'https://api.openweathermap.org/geo/1.0/direct';\n\n  try {\n    const response = await fetch(\n      `${OPENWEATHERMAP_API_URL}?limit=10&q=${input}&appid=${WEATHER_API_KEY}`\n    );\n\n    const data = await response.json();\n    clg\n    return data;\n  } catch (error) {\n    console.log(error);\n    return null; // Return null if there's an error\n  }\n};\n\nconst fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n    return []; // Return empty array if there's an error\n  }\n};\n\nexport { fetchCitiesData, fetchCities, fetchWeatherData };\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,yCAAyC;AACjE,MAAMC,eAAe,GAAG,kCAAkC;AAE1D,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3C,IAAI;IACF,MAAM,CAACC,cAAc,EAAEC,eAAe,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC1DC,KAAK,CACF,GAAET,eAAgB,gBAAeG,GAAI,QAAOC,GAAI,UAASH,eAAgB,eAC5E,CAAC,EACDQ,KAAK,CACF,GAAET,eAAgB,iBAAgBG,GAAI,QAAOC,GAAI,UAASH,eAAgB,eAC7E,CAAC,CACF,CAAC;IAEF,MAAM,CAACS,eAAe,EAAEC,gBAAgB,CAAC,GAAG,MAAMJ,OAAO,CAACC,GAAG,CAAC,CAC5DH,cAAc,CAACO,IAAI,CAAC,CAAC,EACrBN,eAAe,CAACM,IAAI,CAAC,CAAC,CACvB,CAAC;IAEF,OAAO,CAACF,eAAe,EAAEC,gBAAgB,CAAC;EAC5C,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;EACvB;AACF,CAAC;AAED,MAAMG,WAAW,GAAG,MAAOC,KAAK,IAAK;EACnC,MAAMC,sBAAsB,GAAG,+CAA+C;EAE9E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CACzB,GAAES,sBAAuB,eAAcD,KAAM,UAAShB,eAAgB,EACzE,CAAC;IAED,MAAMmB,IAAI,GAAG,MAAMD,QAAQ,CAACP,IAAI,CAAC,CAAC;IAClCS,GAAG;IACH,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;AAED,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMV,KAAK,CAAC,4NAA4N,CAAC;IAC1P,MAAMW,IAAI,GAAG,MAAMD,QAAQ,CAACP,IAAI,CAAC,CAAC;IAClC,OAAOQ,IAAI,CAACG,OAAO;EACrB,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;AAED,SAASS,eAAe,EAAEN,WAAW,EAAEd,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}