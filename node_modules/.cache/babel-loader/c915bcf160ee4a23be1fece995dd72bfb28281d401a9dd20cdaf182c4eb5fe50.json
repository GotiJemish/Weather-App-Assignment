{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gja53\\\\OneDrive\\\\Desktop\\\\the-weather-forecasting-main\\\\the-weather-forecasting-main\\\\src\\\\components\\\\Search\\\\Searchbar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\nconst GEO_API_OPTIONS = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\n  }\n};\nasync function fetchCities(input) {\n  try {\n    const response = await fetch(`${GEO_API_URL}/cities?minPopulation=10000&namePrefix=${input}`, GEO_API_OPTIONS);\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching cities:', error);\n    throw error;\n  }\n}\nconst Searchbar = ({\n  onSearchChange\n}) => {\n  _s();\n  const [searchValue, setSearchValue] = useState(null);\n  const loadOptions = async inputValue => {\n    try {\n      const citiesList = await fetchCities(inputValue);\n      return {\n        options: citiesList.data.map(city => ({\n          value: `${city.latitude} ${city.longitude}`,\n          label: `${city.name}, ${city.countryCode}`\n        }))\n      };\n    } catch (error) {\n      console.error('Error loading options:', error);\n      return {\n        options: []\n      };\n    }\n  };\n  const onChangeHandler = enteredData => {\n    setSearchValue(enteredData);\n    onSearchChange(enteredData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for cities\",\n    debounceTimeout: 600,\n    value: searchValue,\n    onChange: onChangeHandler,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Searchbar, \"OrQVItsfaX3xDem37kG4cfR7N1k=\");\n_c = Searchbar;\nexport default Searchbar;\nvar _c;\n$RefreshReg$(_c, \"Searchbar\");","map":{"version":3,"names":["React","useState","AsyncPaginate","jsxDEV","_jsxDEV","GEO_API_URL","GEO_API_OPTIONS","method","headers","fetchCities","input","response","fetch","ok","Error","data","json","error","console","Searchbar","onSearchChange","_s","searchValue","setSearchValue","loadOptions","inputValue","citiesList","options","map","city","value","latitude","longitude","label","name","countryCode","onChangeHandler","enteredData","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/components/Search/Searchbar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { AsyncPaginate } from 'react-select-async-paginate';\r\n\r\nconst GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\r\nconst GEO_API_OPTIONS = {\r\n  method: 'GET',\r\n  headers: {\r\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\r\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\r\n  },\r\n};\r\n\r\nasync function fetchCities(input) {\r\n  try {\r\n    const response = await fetch(\r\n      `${GEO_API_URL}/cities?minPopulation=10000&namePrefix=${input}`,\r\n      GEO_API_OPTIONS\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching cities:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst Searchbar = ({ onSearchChange }) => {\r\n  const [searchValue, setSearchValue] = useState(null);\r\n\r\n  const loadOptions = async (inputValue) => {\r\n    try {\r\n      const citiesList = await fetchCities(inputValue);\r\n\r\n      return {\r\n        options: citiesList.data.map((city) => ({\r\n          value: `${city.latitude} ${city.longitude}`,\r\n          label: `${city.name}, ${city.countryCode}`,\r\n        })),\r\n      };\r\n    } catch (error) {\r\n      console.error('Error loading options:', error);\r\n      return { options: [] };\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (enteredData) => {\r\n    setSearchValue(enteredData);\r\n    onSearchChange(enteredData);\r\n  };\r\n\r\n  return (\r\n    <AsyncPaginate\r\n      placeholder=\"Search for cities\"\r\n      debounceTimeout={600}\r\n      value={searchValue}\r\n      onChange={onChangeHandler}\r\n      loadOptions={loadOptions}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,WAAW,GAAG,0CAA0C;AAC9D,MAAMC,eAAe,GAAG;EACtBC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;IACP,gBAAgB,EAAE,oDAAoD;IACtE,iBAAiB,EAAE;EACrB;AACF,CAAC;AAED,eAAeC,WAAWA,CAACC,KAAK,EAAE;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEP,WAAY,0CAAyCK,KAAM,EAAC,EAC/DJ,eACF,CAAC;IAED,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF;AAEA,MAAME,SAAS,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMuB,WAAW,GAAG,MAAOC,UAAU,IAAK;IACxC,IAAI;MACF,MAAMC,UAAU,GAAG,MAAMjB,WAAW,CAACgB,UAAU,CAAC;MAEhD,OAAO;QACLE,OAAO,EAAED,UAAU,CAACX,IAAI,CAACa,GAAG,CAAEC,IAAI,KAAM;UACtCC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EAAC;UAC3CC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,WAAY;QAC3C,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QAAEU,OAAO,EAAE;MAAG,CAAC;IACxB;EACF,CAAC;EAED,MAAMS,eAAe,GAAIC,WAAW,IAAK;IACvCd,cAAc,CAACc,WAAW,CAAC;IAC3BjB,cAAc,CAACiB,WAAW,CAAC;EAC7B,CAAC;EAED,oBACEjC,OAAA,CAACF,aAAa;IACZoC,WAAW,EAAC,mBAAmB;IAC/BC,eAAe,EAAE,GAAI;IACrBT,KAAK,EAAER,WAAY;IACnBkB,QAAQ,EAAEJ,eAAgB;IAC1BZ,WAAW,EAAEA;EAAY;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN,CAAC;AAACvB,EAAA,CAjCIF,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAmCf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}