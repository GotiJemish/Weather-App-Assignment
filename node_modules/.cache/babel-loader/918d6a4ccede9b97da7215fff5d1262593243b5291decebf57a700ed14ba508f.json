{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gja53\\\\OneDrive\\\\Desktop\\\\the-weather-forecasting-main\\\\the-weather-forecasting-main\\\\src\\\\components\\\\Reusable\\\\UTCTime.js\";\nimport React from 'react';\nimport { Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UTCTime = ({\n  timezone\n}) => {\n  const formatTime = (utcTime, timezoneOffset) => {\n    const localTime = new Date(utcTime * 1000 + timezoneOffset * 1000);\n    const hours = localTime.getHours();\n    const minutes = localTime.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    const formattedHours = hours % 12 || 12;\n    const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${formattedHours}:${formattedMinutes} ${ampm}`;\n  };\n\n  // const localTime = new Date(utcTime * 1000 + timezoneOffset * 1000);\n  // const utcTime = localTime.toLocaleString('en-US', { // Adjust time based on timezone offset\n  //   hour: '2-digit',\n  //   minute: '2-digit',\n  //   hourCycle: 'h12',\n  //   timeZone: 'UTC', // Display time in UTC timezone\n  // });\n\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    variant: \"h3\",\n    component: \"h3\",\n    sx: {\n      fontSize: '20px',\n      color: 'rgba(255, 255, 255, .7)',\n      fontFamily: 'Poppins'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = UTCTime;\nexport default UTCTime;\nvar _c;\n$RefreshReg$(_c, \"UTCTime\");","map":{"version":3,"names":["React","Typography","jsxDEV","_jsxDEV","UTCTime","timezone","formatTime","utcTime","timezoneOffset","localTime","Date","hours","getHours","minutes","getMinutes","ampm","formattedHours","formattedMinutes","variant","component","sx","fontSize","color","fontFamily","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/components/Reusable/UTCTime.js"],"sourcesContent":["import React from 'react';\nimport { Typography } from '@mui/material';\n\nconst UTCTime = ({ timezone }) => {\n\n  const formatTime = (utcTime, timezoneOffset) => {\n    const localTime = new Date(utcTime * 1000 + timezoneOffset * 1000);\n    const hours = localTime.getHours();\n    const minutes = localTime.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    const formattedHours = hours % 12 || 12;\n    const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${formattedHours}:${formattedMinutes} ${ampm}`;\n  };\n\n  // const localTime = new Date(utcTime * 1000 + timezoneOffset * 1000);\n  // const utcTime = localTime.toLocaleString('en-US', { // Adjust time based on timezone offset\n  //   hour: '2-digit',\n  //   minute: '2-digit',\n  //   hourCycle: 'h12',\n  //   timeZone: 'UTC', // Display time in UTC timezone\n  // });\n\n  return (\n    <Typography\n      variant=\"h3\"\n      component=\"h3\"\n      sx={{\n        fontSize: '20px',\n        color: 'rgba(255, 255, 255, .7)',\n        fontFamily: 'Poppins',\n      }}\n    >\n      {/* {utcTime} GMT */}\n    </Typography>\n  );\n};\n\nexport default UTCTime;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAEhC,MAAMC,UAAU,GAAGA,CAACC,OAAO,EAAEC,cAAc,KAAK;IAC9C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACH,OAAO,GAAG,IAAI,GAAGC,cAAc,GAAG,IAAI,CAAC;IAClE,MAAMG,KAAK,GAAGF,SAAS,CAACG,QAAQ,CAAC,CAAC;IAClC,MAAMC,OAAO,GAAGJ,SAAS,CAACK,UAAU,CAAC,CAAC;IACtC,MAAMC,IAAI,GAAGJ,KAAK,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;IACtC,MAAMK,cAAc,GAAGL,KAAK,GAAG,EAAE,IAAI,EAAE;IACvC,MAAMM,gBAAgB,GAAGJ,OAAO,GAAG,EAAE,GAAI,IAAGA,OAAQ,EAAC,GAAGA,OAAO;IAC/D,OAAQ,GAAEG,cAAe,IAAGC,gBAAiB,IAAGF,IAAK,EAAC;EACxD,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEZ,OAAA,CAACF,UAAU;IACTiB,OAAO,EAAC,IAAI;IACZC,SAAS,EAAC,IAAI;IACdC,EAAE,EAAE;MACFC,QAAQ,EAAE,MAAM;MAChBC,KAAK,EAAE,yBAAyB;MAChCC,UAAU,EAAE;IACd;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGQ,CAAC;AAEjB,CAAC;AAACC,EAAA,GAjCIxB,OAAO;AAmCb,eAAeA,OAAO;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}