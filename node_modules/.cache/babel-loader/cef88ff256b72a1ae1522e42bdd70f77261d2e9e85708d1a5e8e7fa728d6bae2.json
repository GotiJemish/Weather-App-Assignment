{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gja53\\\\OneDrive\\\\Desktop\\\\the-weather-forecasting-main\\\\the-weather-forecasting-main\\\\src\\\\components\\\\Pages\\\\Weather.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Box, Container, Grid, Link, Typography, SvgIcon } from '@mui/material';\nimport Search from './../Search/Search';\nimport { fetchWeatherData } from './../../api/OpenWeatherService';\nimport { transformDateFormat } from './../../utilities/DatetimeUtils';\nimport UTCDatetime from './../Reusable/UTCDatetime';\nimport LoadingBox from './../Reusable/LoadingBox';\nimport { ReactComponent as SplashIcon } from './../../assets/splash-icon.svg';\nimport Logo from './../../assets/logo.png';\nimport ErrorBox from './../Reusable/ErrorBox';\nimport { ALL_DESCRIPTIONS } from './../../utilities/DateConstants';\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport { getTodayForecastWeather, getWeekForecastWeather } from './../../utilities/DataUtils';\nimport { useLocation } from 'react-router-dom';\nimport TodayWeather from '../TodayWeather/TodayWeather';\nimport WeeklyForecast from '../WeeklyForecast/WeeklyForecast';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Weather = () => {\n  // const [todayWeather, setTodayWeather] = useState(null);\n  // const [todayForecast, setTodayForecast] = useState([]);\n  // const [weekForecast, setWeekForecast] = useState(null);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(false);\n\n  // const searchChangeHandler = async (enteredData) => {\n  //   const [latitude, longitude] = enteredData.value.split(' ');\n\n  //   setIsLoading(true);\n\n  //   const currentDate = transformDateFormat();\n  //   const date = new Date();\n  //   let dt_now = Math.floor(date.getTime() / 1000);\n\n  //   try {\n  //     const [todayWeatherResponse, weekForecastResponse] =\n  //       await fetchWeatherData(latitude, longitude);\n  //     const all_today_forecasts_list = getTodayForecastWeather(\n  //       weekForecastResponse,\n  //       currentDate,\n  //       dt_now\n  //     );\n\n  //     const all_week_forecasts_list = getWeekForecastWeather(\n  //       weekForecastResponse,\n  //       ALL_DESCRIPTIONS\n  //     );\n\n  //     setTodayForecast([...all_today_forecasts_list]);\n  //     setTodayWeather({ city: enteredData.label, ...todayWeatherResponse });\n  //     setWeekForecast({\n  //       city: enteredData.label,\n  //       list: all_week_forecasts_list,\n  //     });\n  //   } catch (error) {\n  //     setError(true);\n  //   }\n\n  //   setIsLoading(false);\n  // };\n\n  // let appContent = (\n  //   <Box\n  //     xs={12}\n  //     display=\"flex\"\n  //     flexDirection=\"column\"\n  //     alignItems=\"center\"\n  //     justifyContent=\"center\"\n  //     sx={{\n  //       width: '100%',\n  //       minHeight: '500px',\n  //     }}\n  //   >\n  //     <SvgIcon\n  //       component={SplashIcon}\n  //       inheritViewBox\n  //       sx={{ fontSize: { xs: '100px', sm: '120px', md: '140px' } }}\n  //     />\n  //     <Typography\n  //       variant=\"h4\"\n  //       component=\"h4\"\n  //       sx={{\n  //         fontSize: { xs: '12px', sm: '14px' },\n  //         color: 'rgba(255,255,255, .85)',\n  //         fontFamily: 'Poppins',\n  //         textAlign: 'center',\n  //         margin: '2rem 0',\n  //         maxWidth: '80%',\n  //         lineHeight: '22px',\n  //       }}\n  //     >\n  //       Explore current weather data and 6-day forecast of more than 200,000\n  //       cities!\n  //     </Typography>\n  //   </Box>\n  // );\n\n  // if (todayWeather && todayForecast && weekForecast) {\n  //   appContent = (\n  //     <React.Fragment>\n  //       <Grid item xs={12} md={todayWeather ? 6 : 12}>\n  //         <Grid item xs={12}>\n  //           <TodayWeather data={todayWeather} forecastList={todayForecast} />\n  //         </Grid>\n  //       </Grid>\n  //       <Grid item xs={12} md={6}>\n  //         <WeeklyForecast data={weekForecast} />\n  //       </Grid>\n  //     </React.Fragment>\n  //   );\n  // }\n\n  // if (error) {\n  //   appContent = (\n  //     <ErrorBox\n  //       margin=\"3rem auto\"\n  //       flex=\"inherit\"\n  //       errorMessage=\"Something went wrong\"\n  //     />\n  //   );\n  // }\n\n  // if (isLoading) {\n  //   appContent = (\n  //     <Box\n  //       sx={{\n  //         display: 'flex',\n  //         justifyContent: 'center',\n  //         alignItems: 'center',\n  //         width: '100%',\n  //         minHeight: '500px',\n  //       }}\n  //     >\n  //       <LoadingBox value=\"1\">\n  //         <Typography\n  //           variant=\"h3\"\n  //           component=\"h3\"\n  //           sx={{\n  //             fontSize: { xs: '10px', sm: '12px' },\n  //             color: 'rgba(255, 255, 255, .8)',\n  //             lineHeight: 1,\n  //             fontFamily: 'Poppins',\n  //           }}\n  //         >\n  //           Loading...\n  //         </Typography>\n  //       </LoadingBox>\n  //     </Box>\n  //   );\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: \"Weather Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: [\"City: \", weatherData.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: [\"Temperature: \", weatherData.main.temp, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: [\"Weather: \", weatherData.weather[0].description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","Box","Container","Grid","Link","Typography","SvgIcon","Search","fetchWeatherData","transformDateFormat","UTCDatetime","LoadingBox","ReactComponent","SplashIcon","Logo","ErrorBox","ALL_DESCRIPTIONS","GitHubIcon","getTodayForecastWeather","getWeekForecastWeather","useLocation","TodayWeather","WeeklyForecast","jsxDEV","_jsxDEV","Fragment","_Fragment","Weather","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","weatherData","name","main","temp","weather","description","_c","$RefreshReg$"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/components/Pages/Weather.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Box, Container, Grid, Link, Typography, SvgIcon } from '@mui/material';\r\nimport Search from './../Search/Search';\r\nimport { fetchWeatherData } from './../../api/OpenWeatherService';\r\nimport { transformDateFormat } from './../../utilities/DatetimeUtils';\r\nimport UTCDatetime from './../Reusable/UTCDatetime';\r\nimport LoadingBox from './../Reusable/LoadingBox';\r\nimport { ReactComponent as SplashIcon } from './../../assets/splash-icon.svg';\r\nimport Logo from './../../assets/logo.png';\r\nimport ErrorBox from './../Reusable/ErrorBox';\r\nimport { ALL_DESCRIPTIONS } from './../../utilities/DateConstants';\r\nimport GitHubIcon from '@mui/icons-material/GitHub';\r\nimport { getTodayForecastWeather, getWeekForecastWeather } from './../../utilities/DataUtils';\r\nimport { useLocation } from 'react-router-dom';\r\nimport TodayWeather from '../TodayWeather/TodayWeather';\r\nimport WeeklyForecast from '../WeeklyForecast/WeeklyForecast';\r\n\r\nconst Weather = () => {\r\n  // const [todayWeather, setTodayWeather] = useState(null);\r\n  // const [todayForecast, setTodayForecast] = useState([]);\r\n  // const [weekForecast, setWeekForecast] = useState(null);\r\n  // const [isLoading, setIsLoading] = useState(false);\r\n  // const [error, setError] = useState(false);\r\n\r\n \r\n\r\n  // const searchChangeHandler = async (enteredData) => {\r\n  //   const [latitude, longitude] = enteredData.value.split(' ');\r\n\r\n  //   setIsLoading(true);\r\n\r\n  //   const currentDate = transformDateFormat();\r\n  //   const date = new Date();\r\n  //   let dt_now = Math.floor(date.getTime() / 1000);\r\n\r\n  //   try {\r\n  //     const [todayWeatherResponse, weekForecastResponse] =\r\n  //       await fetchWeatherData(latitude, longitude);\r\n  //     const all_today_forecasts_list = getTodayForecastWeather(\r\n  //       weekForecastResponse,\r\n  //       currentDate,\r\n  //       dt_now\r\n  //     );\r\n\r\n  //     const all_week_forecasts_list = getWeekForecastWeather(\r\n  //       weekForecastResponse,\r\n  //       ALL_DESCRIPTIONS\r\n  //     );\r\n\r\n  //     setTodayForecast([...all_today_forecasts_list]);\r\n  //     setTodayWeather({ city: enteredData.label, ...todayWeatherResponse });\r\n  //     setWeekForecast({\r\n  //       city: enteredData.label,\r\n  //       list: all_week_forecasts_list,\r\n  //     });\r\n  //   } catch (error) {\r\n  //     setError(true);\r\n  //   }\r\n\r\n  //   setIsLoading(false);\r\n  // };\r\n\r\n  // let appContent = (\r\n  //   <Box\r\n  //     xs={12}\r\n  //     display=\"flex\"\r\n  //     flexDirection=\"column\"\r\n  //     alignItems=\"center\"\r\n  //     justifyContent=\"center\"\r\n  //     sx={{\r\n  //       width: '100%',\r\n  //       minHeight: '500px',\r\n  //     }}\r\n  //   >\r\n  //     <SvgIcon\r\n  //       component={SplashIcon}\r\n  //       inheritViewBox\r\n  //       sx={{ fontSize: { xs: '100px', sm: '120px', md: '140px' } }}\r\n  //     />\r\n  //     <Typography\r\n  //       variant=\"h4\"\r\n  //       component=\"h4\"\r\n  //       sx={{\r\n  //         fontSize: { xs: '12px', sm: '14px' },\r\n  //         color: 'rgba(255,255,255, .85)',\r\n  //         fontFamily: 'Poppins',\r\n  //         textAlign: 'center',\r\n  //         margin: '2rem 0',\r\n  //         maxWidth: '80%',\r\n  //         lineHeight: '22px',\r\n  //       }}\r\n  //     >\r\n  //       Explore current weather data and 6-day forecast of more than 200,000\r\n  //       cities!\r\n  //     </Typography>\r\n  //   </Box>\r\n  // );\r\n\r\n  // if (todayWeather && todayForecast && weekForecast) {\r\n  //   appContent = (\r\n  //     <React.Fragment>\r\n  //       <Grid item xs={12} md={todayWeather ? 6 : 12}>\r\n  //         <Grid item xs={12}>\r\n  //           <TodayWeather data={todayWeather} forecastList={todayForecast} />\r\n  //         </Grid>\r\n  //       </Grid>\r\n  //       <Grid item xs={12} md={6}>\r\n  //         <WeeklyForecast data={weekForecast} />\r\n  //       </Grid>\r\n  //     </React.Fragment>\r\n  //   );\r\n  // }\r\n\r\n  // if (error) {\r\n  //   appContent = (\r\n  //     <ErrorBox\r\n  //       margin=\"3rem auto\"\r\n  //       flex=\"inherit\"\r\n  //       errorMessage=\"Something went wrong\"\r\n  //     />\r\n  //   );\r\n  // }\r\n\r\n  // if (isLoading) {\r\n  //   appContent = (\r\n  //     <Box\r\n  //       sx={{\r\n  //         display: 'flex',\r\n  //         justifyContent: 'center',\r\n  //         alignItems: 'center',\r\n  //         width: '100%',\r\n  //         minHeight: '500px',\r\n  //       }}\r\n  //     >\r\n  //       <LoadingBox value=\"1\">\r\n  //         <Typography\r\n  //           variant=\"h3\"\r\n  //           component=\"h3\"\r\n  //           sx={{\r\n  //             fontSize: { xs: '10px', sm: '12px' },\r\n  //             color: 'rgba(255, 255, 255, .8)',\r\n  //             lineHeight: 1,\r\n  //             fontFamily: 'Poppins',\r\n  //           }}\r\n  //         >\r\n  //           Loading...\r\n  //         </Typography>\r\n  //       </LoadingBox>\r\n  //     </Box>\r\n  //   );\r\n  // }\r\n\r\n  return (<>\r\n\r\n    <Typography variant=\"h4\">Weather Information</Typography>\r\n      <Typography variant=\"body1\">City: {weatherData.name}</Typography>\r\n      <Typography variant=\"body1\">Temperature: {weatherData.main.temp}°C</Typography>\r\n      <Typography variant=\"body1\">Weather: {weatherData.weather[0].description}</Typography>\r\n\r\n\r\n\r\n\r\n\r\n    {/* <Container\r\n      sx={{\r\n        maxWidth: { xs: '95%', sm: '80%', md: '1100px' },\r\n        width: '100%',\r\n        height: '100%',\r\n        margin: '0 auto',\r\n        padding: '1rem 0 3rem',\r\n        marginBottom: '1rem',\r\n        borderRadius: {\r\n          xs: 'none',\r\n          sm: '0 0 1rem 1rem',\r\n        },\r\n        boxShadow: {\r\n          xs: 'none',\r\n          sm: 'rgba(0,0,0, 0.5) 0px 10px 15px -3px, rgba(0,0,0, 0.5) 0px 4px 6px -2px',\r\n        },\r\n      }}\r\n    >\r\n      <Grid container columnSpacing={2}>\r\n        <Grid item xs={12}>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            sx={{\r\n              width: '100%',\r\n              marginBottom: '1rem',\r\n            }}\r\n          >\r\n            <Box\r\n              component=\"img\"\r\n              sx={{\r\n                height: { xs: '16px', sm: '22px', md: '26px' },\r\n                width: 'auto',\r\n              }}\r\n              alt=\"logo\"\r\n              src={Logo}\r\n            />\r\n\r\n            <UTCDatetime />\r\n            <Link\r\n              href=\"https://github.com/Amin-Awinti\"\r\n              target=\"_blank\"\r\n              underline=\"none\"\r\n              sx={{ display: 'flex' }}\r\n            >\r\n              <GitHubIcon\r\n                sx={{\r\n                  fontSize: { xs: '20px', sm: '22px', md: '26px' },\r\n                  color: 'white',\r\n                  '&:hover': { color: '#2d95bd' },\r\n                }}\r\n              />\r\n            </Link>\r\n          </Box>\r\n          <Search onSearchChange={searchChangeHandler} />\r\n        </Grid>\r\n        {appContent}\r\n      </Grid>\r\n    </Container> */}\r\n    </>);\r\n}\r\n\r\nexport default Weather;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}