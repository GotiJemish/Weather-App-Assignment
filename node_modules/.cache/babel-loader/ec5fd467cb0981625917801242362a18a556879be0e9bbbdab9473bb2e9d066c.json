{"ast":null,"code":"const fetchCitiesData = async () => {\n  try {\n    const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching cities data:', error);\n  }\n};\nconst fetchWeatherData = async (lat, lon) => {\n  try {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=e8f9ed3cc3e9b171dd790bfa019139d9&units=metric`);\n    if (response.ok) {\n      const data = await response.json();\n      return data;\n    } else {\n      console.error('Failed to fetch weather data:', response.statusText);\n    }\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n  }\n};\nexport { fetchCitiesData, fetchWeatherData };","map":{"version":3,"names":["fetchCitiesData","response","fetch","data","json","results","error","console","fetchWeatherData","lat","lon","ok","statusText"],"sources":["C:/Users/gja53/OneDrive/Desktop/the-weather-forecasting-main/the-weather-forecasting-main/src/api/TableData.js"],"sourcesContent":["const fetchCitiesData = async () => {\r\n    try {\r\n      const response = await fetch('https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/geonames-all-cities-with-a-population-1000/records?where=population%3E100000%20AND%20alternate_names!%3D%22%22&limit=100&refine=feature_code%3A%22PPL%22');\r\n      const data = await response.json();\r\n    return data.results\r\n    } catch (error) {\r\n      console.error('Error fetching cities data:', error);\r\n    }\r\n  };\r\n  \r\n  const fetchWeatherData = async (lat,lon) => {\r\n    try {\r\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=e8f9ed3cc3e9b171dd790bfa019139d9&units=metric`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return data\r\n      } else {\r\n        console.error('Failed to fetch weather data:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching weather data:', error);\r\n    } \r\n  };\r\n  export { fetchCitiesData,fetchWeatherData };"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4NAA4N,CAAC;IAC1P,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACpC,OAAOD,IAAI,CAACE,OAAO;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC;AAED,MAAME,gBAAgB,GAAG,MAAAA,CAAOC,GAAG,EAACC,GAAG,KAAK;EAC1C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,uDAAsDO,GAAI,QAAOC,GAAI,sDAAqD,CAAC;IACzJ,IAAIT,QAAQ,CAACU,EAAE,EAAE;MACf,MAAMR,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,MAAM;MACLI,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEL,QAAQ,CAACW,UAAU,CAAC;IACrE;EACF,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACtD;AACF,CAAC;AACD,SAASN,eAAe,EAACQ,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}